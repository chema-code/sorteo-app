{"version":3,"sources":["componets/Progress_bar.js","componets/PdfExport.js","componets/SorteoScreen.js","hooks/useForm.js","SorteosApp.js","index.js","Utils/SorteoFunctions.js"],"names":["Progress_bar","StyleSheet","create","body","paddingTop","paddingBottom","paddingHorizontal","title","fontSize","textAlign","text","header","marginBottom","color","pageNumber","position","bottom","left","right","bgcolor","progress","Parentdiv","height","width","backgroundColor","borderRadius","margin","Childdiv","style","padding","fontWeight","SorteoScreen","useState","parsed","setParsed","hasData","setHashData","finSorteo","setFinSorteo","sorteoData","setSorteoData","uploadFile","useRef","showProgessBar","setShowProgressBar","setProgress","useEffect","console","log","initialState","values","setValues","target","name","value","useForm","NumPremios","NumMinSorteo","NumMaxSorteo","formRegisterValues","handleRegisterInputChange","handleSortear","a","Sortear2","setParentProgress","data","sorteoFinalizado","pause","Math","round","className","id","type","onChange","placeholder","autoComplete","required","cclassNamelass","ref","current","files","d3","disabled","class","htmlFor","onClick","window","print","scope","map","oRow","i","idsolicitante","SorteosApp","ReactDOM","render","StrictMode","document","getElementById","t","Promise","resolve","reject","setTimeout","Sortear","premios","min","max","numerosGanadores","ganadores","valorProgreso","valorOrginalPremios","addLog","progreso","numeroPremiado","getRandomInt","undefined","concursante","buscarConcursante","buscarPremiado","totalPremios","idacomp1","idacomp2","idacomp3","addToGanadores","substractPremio","campo","listaPremios","length","valor","eval","indiceASeleccionar","splice","random","res","find","c","toString","premio","texto","Date","toISOString","cantidad"],"mappings":"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","file":"static/js/main.b34e96c9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Progress_bar = ({bgcolor,progress,height}) => {\r\n\t\r\n\tconst Parentdiv = {\r\n\t\theight: height,\r\n\t\twidth: '80%',\r\n\t\tbackgroundColor: 'whitesmoke',\r\n\t\tborderRadius: 40,\r\n\t\tmargin: 50\r\n\t}\r\n\t\r\n\tconst Childdiv = {\r\n\t\theight: '100%',\r\n\t\twidth: `${progress}%`,\r\n\t\tbackgroundColor: bgcolor,\r\n\tborderRadius:40,\r\n\t\ttextAlign: 'right'\r\n\t}\r\n\t\r\n\tconst progresstext = {\r\n\t\tpadding: 10,\r\n\t\tcolor: 'black',\r\n\t\tfontWeight: 900\r\n\t}\r\n\t\t\r\n\treturn (\r\n\t<div style={Parentdiv}>\r\n\t<div style={Childdiv}>\r\n\t\t<span style={progresstext}>{`${progress}%`}</span>\r\n\t</div>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default Progress_bar;\r\n","import React from 'react';\r\nimport { Page, Text, Document, StyleSheet } from '@react-pdf/renderer';\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n    body: {\r\n        paddingTop: 35,\r\n        paddingBottom: 65,\r\n        paddingHorizontal: 35,\r\n      },\r\n      title: {\r\n        fontSize: 24,\r\n        textAlign: 'center',\r\n      },\r\n      text: {\r\n        fontSize: 10,\r\n        textAlign: 'left',\r\n      },\r\n      header: {\r\n        fontSize: 12,\r\n        marginBottom: 20,\r\n        textAlign: 'center',\r\n        color: 'grey',\r\n      },\r\n      pageNumber: {\r\n        position: 'absolute',\r\n        fontSize: 12,\r\n        bottom: 30,\r\n        left: 0,\r\n        right: 0,\r\n        textAlign: 'center',\r\n        color: 'grey',\r\n      },\r\n});\r\n\r\n\r\n// Create Document Component\r\nexport const PdfExport = (dataSorteo) => (\r\n   \r\n    <Document>\r\n    <Page style={styles.body}>\r\n      <Text style={styles.header} fixed>\r\n        Sorteo\r\n      </Text>\r\n      <Text style={styles.title}>Operaciones Sorteo</Text>\r\n      \r\n      {\r\n        dataSorteo.dataSorteo[0].map((oRow,i) => (\r\n            <Text key= {\"l\"+i} style={styles.text}>{oRow}</Text>           \r\n        ))\r\n         \r\n      }   \r\n        \r\n        <Text style={styles.title}>Ganadores Sorteo</Text>\r\n               \r\n        {\r\n            dataSorteo.dataSorteo[1].map((oRow, i) => (\r\n                <Text key= {\"g\" + i} style={styles.text}>{oRow}</Text>\r\n            ))\r\n        }      \r\n    \r\n        <Text style={styles.pageNumber} render={({ pageNumber, totalPages }) => (\r\n        `${pageNumber} / ${totalPages}`\r\n      )} fixed />\r\n   \r\n    </Page>\r\n  </Document>\r\n);","import React, { useRef, useState, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\n\r\nimport { useForm } from '../hooks/useForm';\r\nimport { PDFDownloadLink, BlobProvider } from '@react-pdf/renderer';\r\nimport { PdfExport } from './PdfExport';\r\nimport Progress_bar from './Progress_bar';\r\nimport { pause, Sortear, Sortear2 } from '../Utils/SorteoFunctions';\r\n//import { doc, generarPdf } from './Pdf_jspdf';\r\n\r\n\r\n//import * as  pdfKit from 'pdfkit';\r\n\r\nexport const SorteoScreen = () => {\r\n    const [parsed, setParsed] = useState([]);\r\n    const [hasData, setHashData] = useState(false);\r\n    const [finSorteo, setFinSorteo] = useState(false);\r\n    const [sorteoData, setSorteoData] = useState();\r\n    const uploadFile = useRef(null);\r\n    const [showProgessBar, setShowProgressBar] = useState(true);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        console.log(parsed);\r\n    }, [parsed])\r\n\r\n    // useEffect(() => {\r\n    //     //console.log(parsed);\r\n    // }, [progress])\r\n\r\n    const handleFiles = () => {\r\n        console.log(uploadFile.current.files);\r\n        (async () => {\r\n            console.log('uploaded!');\r\n            const text = await uploadFile.current.files[0].text();\r\n            const data = await d3.csvParse(text);\r\n            setParsed(data);\r\n            setHashData(true);\r\n        })();\r\n    }\r\n\r\n    const initialRegisterState = {\r\n        NumPremios: 20,\r\n        NumMinSorteo: 1,\r\n        NumMaxSorteo: 200\r\n    }\r\n    const [formRegisterValues, handleRegisterInputChange] = useForm(initialRegisterState);\r\n\r\n    const { NumPremios, NumMinSorteo, NumMaxSorteo } = formRegisterValues;\r\n\r\n    const handleSortear = async () => {\r\n\r\n        setShowProgressBar(true);\r\n        console.log('Empieza Sorteo', NumPremios, NumMinSorteo, NumMaxSorteo);\r\n        const data = await Sortear2(parsed, NumPremios, NumMinSorteo, NumMaxSorteo, setParentProgress)\r\n        setProgress(100);\r\n        setShowProgressBar(false);\r\n        sorteoFinalizado(data);\r\n\r\n    }\r\n    const sorteoFinalizado = async (data) => {\r\n\r\n        console.log(\"fin sorteo\", data);\r\n        await pause(1000);\r\n        setSorteoData(data);\r\n        setFinSorteo(true);\r\n        await pause(1000);\r\n    }\r\n\r\n\r\n    const setParentProgress = async (progress) => {\r\n        console.log('setParentProgress', progress);\r\n        setProgress(Math.round(progress));\r\n\r\n    }\r\n    const handleImprimir = () => {\r\n        window.print();\r\n    }\r\n\r\n    const handleExportarPDF = () => {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n        <div>\r\n            <h1>Sorteo App v0.6</h1>\r\n            <br></br>\r\n\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-5\">\r\n                        <div className=\"input-group input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"inputGroup-NumPremios\">*Total premios del sorteo</span>\r\n                            </div>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"NumPremios\"\r\n                                onChange={handleRegisterInputChange}\r\n                                value={NumPremios}\r\n                                placeholder=\"Total Premios\"\r\n                                autoComplete=\"off\"\r\n                                required\r\n                                className=\"form-control\" aria-label=\"Default\" aria-describedby=\"inputGroup-NumPremios\" />\r\n                        </div>\r\n\r\n                        <div className=\"input-group input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"inputGroup-NumMinSorteo\">*Valor inicial del sorteo</span>\r\n                            </div>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"NumMinSorteo\"\r\n                                onChange={handleRegisterInputChange}\r\n                                value={NumMinSorteo}\r\n                                placeholder=\"Número inicial sorteo\"\r\n                                autoComplete=\"off\"\r\n                                required\r\n                                className=\"form-control\" aria-label=\"Default\" aria-describedby=\"inputGroup-NumMinSorteo\" />\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"input-group input-group mb-3\">\r\n                            <div cclassNamelass=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"inputGroup-NumMaxSorteo\">*Valor máximo del sorteo</span>\r\n                            </div>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"NumMaxSorteo\"\r\n                                onChange={handleRegisterInputChange}\r\n                                value={NumMaxSorteo}\r\n                                placeholder=\"Número máximo sorteo\"\r\n                                autoComplete=\"off\"\r\n                                required\r\n                                className=\"form-control\" aria-label=\"Default\" aria-describedby=\"inputGroup-NumMaxSorteo\" />\r\n                        </div>\r\n\r\n\r\n                        {/* <div class=\"input-group input-group mb-3\">\r\n                    <div class=\"input-group-prepend\">\r\n                        <span class=\"input-group-text\" id=\"inputGroup-FileUpload\">Fichero CSV con las participaciones</span>\r\n                    </div>\r\n                   <input ref={uploadFile} onChange={handleFiles} type=\"file\" id=\"input\"   \r\n                    aria-label=\"Default\" aria-describedby=\"inputGroup-FileUpload\"/>\r\n                </div> */}\r\n\r\n                        <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\">Subir</span>\r\n                            </div>\r\n                            <div className=\"custom-file\">\r\n                                <input required ref={uploadFile} onChange={handleFiles} disabled={hasData}\r\n                                    type=\"file\" id=\"input\" class=\"custom-file-input\" id=\"inputGroupFile01\"></input>\r\n                                <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">Elegir Fichero</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr></hr>\r\n                <div className=\"row\">\r\n                    <div className=\"col-5\">\r\n                        <div>\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={handleSortear}\r\n                                disabled={finSorteo} >Iniciar Sorteo\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {finSorteo ? (\r\n                    <div className=\"row mt-5\">\r\n                        <div className=\"col-5\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={handleImprimir}\r\n                                disabled={!finSorteo} >Imprimir Resultados\r\n                            </button>\r\n                        </div>\r\n                        {/* <div>\r\n                            <div>\r\n                                {generarPDF()}\r\n                            </div>\r\n                        </div> */}\r\n                        {/* <div className=\"col-5\">\r\n                            <BlobProvider document={<PdfExport dataSorteo={sorteoData} />}>\r\n                                {({ url, loading, error }) => {\r\n                                    if (loading) {\r\n                                        return (\r\n                                            <span>\r\n                                                generating document...\r\n                                            </span>\r\n                                        );\r\n                                        pause(1000);\r\n                                    }\r\n                                    if (!loading && url) {\r\n\r\n                                        return (\r\n                                            <a href={url} download className=\"btn btn-primary\" >\r\n                                                Descargar Resultados\r\n                                            </a>\r\n                                        );\r\n                                    }\r\n                                    if (error) {\r\n                                        console.error(error);\r\n                                        return <p>An error occurred</p>;\r\n                                    }\r\n                                    return null;\r\n                                }}\r\n                            </BlobProvider>\r\n                        </div> */}\r\n\r\n                    </div>) : (<div></div>)}\r\n                <div>\r\n                    <div>\r\n\r\n                        {showProgessBar ? (<Progress_bar bgcolor=\"orange\" progress={progress} height={30} />) : (<div></div>)}\r\n                        {/* {finSorteo ? (\r\n                        <PDFDownloadLink document={<PdfExport dataSorteo={sorteoData}/>} fileName=\"somename.pdf\">\r\n                        {({ blob, url, loading, error }) =>\r\n                            loading ? 'Loading document...' : 'Download now!'\r\n                        }\r\n                        </PDFDownloadLink>\r\n                     ):(<div></div>)} */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr></hr>\r\n            <div className=\"container col-12\">\r\n                <div className=\"row\">\r\n                    <div className=\"card p-1 col-2\">\r\n                        <div className=\"card-body p-1\"> <h2 className=\"card-title text-center\">Paticipaciones</h2>\r\n                            <div>\r\n                                {hasData ? (\r\n\r\n\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">Orden</th>\r\n                                                <th scope=\"col\">Participación</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                parsed.map((oRow, i) => (\r\n                                                    <tr key={\"p\" + i} className={((i % 2) === 0) ? 'table-active' : 'table'}>\r\n                                                        <td className=\"text-right\">{i + 1}\r\n\r\n                                                        </td>\r\n                                                        <td className=\"text-left\"\r\n                                                        >{oRow.idsolicitante}</td>\r\n                                                    </tr>\r\n                                                ))\r\n                                            }\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n                                ) : (\r\n                                    <div></div>\r\n                                )}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card p-1 col-6\">\r\n                        <div className=\"card-body p-1 \"><h2 className=\"card-title text-center\">Sorteo</h2>\r\n                            <div>\r\n                                {sorteoData ? (\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">Orden</th>\r\n                                                <th scope=\"col\">Detalle</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                sorteoData[0].map((oRow, i) => (\r\n                                                    <tr key={\"p\" + i} className={((i % 2) === 0) ? 'table-active' : 'table'}>\r\n                                                        <td className=\"text-right\">{i + 1}\r\n\r\n                                                        </td>\r\n                                                        <td className=\"text-left\"\r\n                                                        >{oRow}</td>\r\n                                                    </tr>\r\n                                                ))\r\n                                            }\r\n                                        </tbody>\r\n                                    </table>\r\n                                ) : (<div></div>)\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card p-1 col-2\">\r\n                        <div className=\"card-body p-1\"><h2 className=\"card-title text-center\">Números</h2>\r\n                            <div>\r\n                                {finSorteo ? (\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">Orden</th>\r\n                                                <th scope=\"col\">Número Ganador</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                sorteoData[2].map((oRow, i) => (\r\n                                                    <tr key={\"p\" + i} className={((i % 2) === 0) ? 'table-active' : 'table'}>\r\n                                                        <td className=\"text-right\">{i + 1}\r\n\r\n                                                        </td>\r\n                                                        <td className=\"text-right\"\r\n                                                        >{oRow}</td>\r\n                                                    </tr>\r\n                                                ))\r\n                                            }\r\n                                        </tbody>\r\n                                    </table>\r\n                                ) : (<div></div>)\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card p-1 col-2\">\r\n                        <div className=\"card-body p-1\"><h2 className=\"card-title text-center\">Abonados</h2>\r\n                            <div>\r\n                                {finSorteo ? (\r\n\r\n                                    <table className=\"table table-bordered\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">Orden</th>\r\n                                                <th scope=\"col\">Id Unico</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                sorteoData[1].map((oRow, i) => (\r\n                                                    <tr key={\"p\" + i} className={((i % 2) === 0) ? 'table-active' : 'table'}>\r\n                                                        <td className=\"text-right\">{i + 1}\r\n\r\n                                                        </td>\r\n                                                        <td className=\"text-right\"\r\n                                                        >{oRow}</td>\r\n                                                    </tr>\r\n                                                ))\r\n                                            }\r\n                                        </tbody>\r\n                                    </table>\r\n\r\n                                ) : (<div></div>)\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n};\r\n","import { useState } from \"react\"\r\n\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n  \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    };\r\n\r\n    const handleInputChange = ({target}) =>{\r\n        \r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        })\r\n    };\r\n\r\n    return [values, handleInputChange, reset];\r\n\r\n};","import React from 'react'\r\nimport { SorteoScreen } from './componets/SorteoScreen.js'\r\n\r\nexport const SorteosApp = () => {\r\n    return (\r\n        <div>\r\n            <SorteoScreen/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SorteosApp} from './SorteosApp.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SorteosApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","export function pause(t) {\r\n    var promise = new Promise(\r\n                   function (resolve, reject) {\r\n              setTimeout(\r\n              function () { \r\n                   resolve();\r\n              }, t); \r\n    });\r\n    return promise;\r\n  }\r\n\r\nexport const  Sortear = async (data, premios, min, max, setParentProgress) => {\r\n    //return new Promise(resolve => {\r\n    let log = [];\r\n    let numerosGanadores = [];\r\n    let ganadores = [];\r\n    console.log('valores', premios, min, max);\r\n\r\n    const valorProgreso = 100 / premios;\r\n    const valorOrginalPremios = premios;\r\n    while (premios > 0) {\r\n\r\n        log = addLog(log, `Inicio sorteo.`)\r\n        const progreso = valorProgreso * (valorOrginalPremios - premios);\r\n        console.log('progreso', progreso);\r\n        setParentProgress(progreso);\r\n        console.log('premios', premios);\r\n\r\n        const numeroPremiado = getRandomInt(min, max)\r\n        //console.log('numeroPremiado', numeroPremiado);\r\n\r\n        log = addLog(log, `Número (${numeroPremiado})`)\r\n        const concursante = buscarConcursante(data, numeroPremiado);\r\n\r\n        //console.log('concursante', concursante);\r\n\r\n        if (concursante === undefined) {\r\n            log = addLog(log, `Número (${numeroPremiado}) no encontrados entre los concursantes.`);\r\n            continue;\r\n        }\r\n        if (buscarPremiado(numerosGanadores, numeroPremiado)) {\r\n            log = addLog(log, `Número (${numeroPremiado}) ya premiado.`);\r\n            continue;\r\n        }\r\n        \r\n        let totalPremios = 1;\r\n        if (concursante.idacomp1 > 0) {\r\n            totalPremios++;\r\n        }\r\n        if (concursante.idacomp2 > 0) {\r\n            totalPremios++;\r\n        }\r\n        if (concursante.idacomp3 > 0) {\r\n            totalPremios++;\r\n        }\r\n\r\n        if (premios >= totalPremios) {\r\n            numerosGanadores = addToGanadores(numerosGanadores, numeroPremiado);\r\n\r\n            premios = substractPremio(premios, 1);\r\n            ganadores = addToGanadores(ganadores, concursante.idsolicitante);\r\n            log = addLog(log, `Agregar ganador (${numeroPremiado}) premiado, idUnico:${concursante.idsolicitante} quedan ${premios}.`)\r\n\r\n            if (concursante.idacomp1 > 0) {\r\n                ganadores = addToGanadores(ganadores, concursante.idacomp1);\r\n                premios = substractPremio(premios, 1);\r\n                log = addLog(log, `Agregar ganador acompañante(${concursante.idacomp1}) premiado, quedan ${premios}.`)\r\n            }\r\n            if (concursante.idacomp2 > 0) {\r\n                ganadores = addToGanadores(ganadores, concursante.idacomp2);\r\n                premios = substractPremio(premios, 1);\r\n                log = addLog(log, `Agregar ganador acompañante (${concursante.idacomp3}) premiado, quedan ${premios}.`)\r\n            }\r\n            if (concursante.idacomp2 > 0) {\r\n                ganadores = addToGanadores(ganadores, concursante.idacomp3);\r\n                premios = substractPremio(premios, 1);\r\n                log = addLog(log, `Agregar ganador acompañante (${concursante.idacomp3}) premiado, quedan ${premios}.`)\r\n            }\r\n\r\n            //log = addLog(log, `Número (${numeroPremiado}) premiado, quedan ${premios}.`)\r\n        }\r\n        else{\r\n            log = addLog(log, `Saltamos el número (${numeroPremiado}) porque no quedan suficientes premios, hay:${premios} y se solicitan: ${totalPremios}.`)\r\n        }\r\n        \r\n        await pause(1);\r\n        \r\n    }\r\n    \r\n    log = addLog(log, `Fin sorteo.`)\r\n    return [log, ganadores, numerosGanadores];\r\n    //resolve([log, ganadores]);\r\n//})\r\n}\r\n\r\nexport const  Sortear2 = async (data, premios, min, max, setParentProgress) => {\r\n    //return new Promise(resolve => {\r\n    let log = [];\r\n    let numerosGanadores = [];\r\n    let ganadores = [];\r\n    console.log('valores', premios, min, max);\r\n\r\n    const campo = \"idsolicitante\";\r\n\r\n    let listaPremios = [premios];\r\n  \r\n    for(var i = 0; i < data.length; i++){\r\n        const valor =eval('data[' + i +'].'+ campo);\r\n        console.log(\"valor_\" + i, valor);\r\n        listaPremios[i] = valor;\r\n        \r\n    }\r\n    \r\n    const valorProgreso = 100 / premios;\r\n    const valorOrginalPremios = premios;\r\n    \r\n    log = addLog(log, `Inicio sorteo.`)\r\n\r\n    while (premios > 0) {\r\n\r\n       \r\n        const progreso = valorProgreso * (valorOrginalPremios - premios);\r\n        \r\n        console.log('progreso', progreso);\r\n        setParentProgress(progreso);\r\n        console.log('premios', premios);\r\n\r\n        const indiceASeleccionar = getRandomInt(1, listaPremios.length-1);\r\n        const numeroPremiado = listaPremios[indiceASeleccionar];\r\n        \r\n        \r\n        // console.log('listaPremios',listaPremios);\r\n        // console.log('indiceASeleccionar',indiceASeleccionar);\r\n        // console.log('listapremios.length', listaPremios.length);\r\n        // console.log('numeroPremiado',numeroPremiado);\r\n\r\n        log = addLog(log, `Número seleccionado: (${numeroPremiado})`)\r\n        const concursante = buscarConcursante(data, numeroPremiado);\r\n\r\n        //console.log('concursante', concursante);\r\n\r\n        if (concursante === undefined) {\r\n            log = addLog(log, `Número (${numeroPremiado}) no encontrados entre los concursantes.`);\r\n            continue;\r\n        }\r\n        if (buscarPremiado(numerosGanadores, numeroPremiado)) {\r\n            log = addLog(log, `Número (${numeroPremiado}) ya premiado.`);\r\n            continue;\r\n        }\r\n        \r\n        let totalPremios = 1;\r\n        if (concursante.idacomp1 > 0) {\r\n            totalPremios++;\r\n        }\r\n        if (concursante.idacomp2 > 0) {\r\n            totalPremios++;\r\n        }\r\n        if (concursante.idacomp3 > 0) {\r\n            totalPremios++;\r\n        }\r\n\r\n        if (premios >= totalPremios) {\r\n            listaPremios.splice(indiceASeleccionar,1);\r\n\r\n            numerosGanadores = addToGanadores(numerosGanadores, numeroPremiado);\r\n\r\n            premios = substractPremio(premios, 1);\r\n            ganadores = addToGanadores(ganadores, concursante.idsolicitante);\r\n            log = addLog(log, `Agregar ganador (${numeroPremiado}) premiado, idUnico:${concursante.idsolicitante} quedan ${premios}.`)\r\n\r\n            if (concursante.idacomp1 > 0) {\r\n                ganadores = addToGanadores(ganadores, concursante.idacomp1);\r\n                premios = substractPremio(premios, 1);\r\n                log = addLog(log, `Agregar ganador acompañante(${concursante.idacomp1}) premiado, quedan ${premios}.`)\r\n            }\r\n            if (concursante.idacomp2 > 0) {\r\n                ganadores = addToGanadores(ganadores, concursante.idacomp2);\r\n                premios = substractPremio(premios, 1);\r\n                log = addLog(log, `Agregar ganador acompañante (${concursante.idacomp3}) premiado, quedan ${premios}.`)\r\n            }\r\n            if (concursante.idacomp2 > 0) {\r\n                ganadores = addToGanadores(ganadores, concursante.idacomp3);\r\n                premios = substractPremio(premios, 1);\r\n                log = addLog(log, `Agregar ganador acompañante (${concursante.idacomp3}) premiado, quedan ${premios}.`)\r\n            }\r\n\r\n            //log = addLog(log, `Número (${numeroPremiado}) premiado, quedan ${premios}.`)\r\n        }\r\n        else{\r\n            log = addLog(log, `Saltamos el número (${numeroPremiado}) porque no quedan suficientes premios, hay:${premios} y se solicitan: ${totalPremios}.`)\r\n        }\r\n        \r\n        await pause(1);\r\n        \r\n    }\r\n    \r\n    log = addLog(log, `Fin sorteo.`)\r\n    return [log, ganadores, numerosGanadores];\r\n    //resolve([log, ganadores]);\r\n//})\r\n}\r\n\r\n\r\n\r\nconst getRandomInt = (min, max) => {\r\n    return Math.round(Math.random() * (max - min)) + min;\r\n}\r\nconst buscarConcursante = (data, concursante) => {\r\n\r\n    const campo = \"idsolicitante\";\r\n    const res = data.find(c => eval('c.' + campo) === concursante.toString());\r\n    return res;\r\n}\r\n\r\nconst buscarPremiado = (data, concursante) => {\r\n\r\n    const res = data.find(c => c === concursante.toString());\r\n    if (res === undefined) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst addToGanadores = (premios, premio) => {\r\n    return [...premios, premio.toString()];\r\n};\r\n\r\nconst addLog = (log, text) => {\r\n    const fecha = new Date();\r\n    const texto = fecha.toISOString('es-ES') + \" \" + text\r\n    return [...log, texto];\r\n};\r\n\r\nconst substractPremio = (premio, cantidad) => {\r\n    return (premio - cantidad);\r\n};"],"sourceRoot":""}